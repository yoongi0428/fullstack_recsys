[{"/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/index.js":"1","/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/App.js":"2","/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/reportWebVitals.js":"3","/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/components/backup/MovieListForm.js":"4","/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/components/CandidateList.js":"5","/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/components/ContextList.js":"6","/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/components/RecommendList.js":"7"},{"size":543,"mtime":1608362811786,"results":"8","hashOfConfig":"9"},{"size":6002,"mtime":1608901598597,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1608362507722,"results":"11","hashOfConfig":"9"},{"size":3032,"mtime":1608885630278,"results":"12","hashOfConfig":"9"},{"size":1471,"mtime":1608896520181,"results":"13","hashOfConfig":"9"},{"size":1386,"mtime":1608896521237,"results":"14","hashOfConfig":"9"},{"size":1308,"mtime":1608896991936,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1346vci",{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/index.js",[],["33","34"],"/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/App.js",["35","36","37"],"// import React, { useEffect, useState } from 'react';\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CandidateList from './components/CandidateList'\nimport ContextList from './components/ContextList'\nimport RecommendList from './components/RecommendList'\nimport { Container, Icon, Button } from \"semantic-ui-react\"\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      fullMovies: [],\n      candidates: [],\n      selected: [],\n      recommended: []\n    }\n    this.loadMovieDB = this.loadMovieDB.bind(this);\n    this.onRefreshClick = this.onRefreshClick.bind(this)\n    this.onCandidateClick = this.onCandidateClick.bind(this)\n    this.onSelectedClick = this.onSelectedClick.bind(this)\n    this.onRecommendClick = this.onRecommendClick.bind(this)\n\n    this.loadMovieDB();\n  }\n\n  loadMovieDB(){\n    fetch('/init', {method: 'GET'}).then(response =>\n      response.json().then(data => {this.setState((prevState) => ({\n        fullMovies: data.result,\n        candidates: data.result,\n        selected: prevState.selected,\n        recommended: prevState.recommended\n      }))}))\n  }\n\n  onRefreshClick(){\n    this.setState((prevState) => ({\n      fullMovies: prevState.fullMovies,\n      candidates: prevState.fullMovies,\n      selected: [],\n      recommended: []\n    }))\n  }\n\n  onCandidateClick(movie){\n    // check if movie already exists in candidates\n    let alreadyExists = this.state.selected.includes(movie)\n    if (!alreadyExists) {\n      let movieIndex = this.state.candidates.indexOf(movie);\n      this.setState((prevState) => ({\n        fullMovies: prevState.fullMovies,\n        candidates: [...prevState.candidates.slice(0, movieIndex), ...prevState.candidates.slice(movieIndex+1, prevState.candidates.length)],\n        selected: [...prevState.selected, movie],\n        recommended: prevState.recommended\n      }))\n    }\n  }\n\n  onSelectedClick(movie){\n    let alreadyExists = this.state.selected.includes(movie)\n    if (alreadyExists) {\n      let movieIndex = this.state.selected.indexOf(movie);\n      console.log(movieIndex);\n      this.setState((prevState) => ({\n          fullMovies: prevState.fullMovies,\n          candidates: [...prevState.candidates, movie],\n          selected: [...prevState.selected.slice(0, movieIndex), ...prevState.selected.slice(movieIndex+1, prevState.selected.length)],\n          recommended: prevState.recommended\n        }))\n    }\n  }\n  \n  onRecommendClick(){\n    if (this.state.selected.length < 1){\n      console.log('ZERO CONTEXT')\n    }\n    // gather ids from selected list\n    let context_ids = this.state.selected.map(movie => movie.id);\n    // call recommend api\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        context: context_ids,\n        model: 'EASE'})\n    };\n    fetch('/recommend', requestOptions).then(response =>\n      response.json().then(data => {this.setState((prevState) => ({\n        fullMovies: prevState.fullMovies,\n        candidates: prevState.candidates,\n        selected: prevState.selected,\n        recommended: data.result\n      }))}))\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header class=\"ui grid\" style={{marginTop:40, paddingBottom: 100}}>\n          <div style={{fontSize: \"2rem\", float: \"left\", width: \"20%\"}} onClick={this.onRefreshClick}> HOME </div>\n          <div style={{fontSize: \"4rem\", float: \"left\", width: \"60%\"}}> Full Stack RecSys </div>\n          <div style={{fontSize: \"2rem\", float: \"left\", width: \"20%\"}}>\n            Yoonki Jeong\n            <a class=\"ui image label\"><img src=\"/images/avatar/small/joe.jpg\"/></a>\n          </div>\n        </header>\n        {/* <MovieForm onNewMovie={movie => setRecs(currentMovies => [...currentMovies, movie])} /> */}\n        <Container style={{width: \"90%\", marginTop: 40, paddingBottom: 50, textAlign: \"center\"}}>\n          {/* Full movie table */}\n          <Container id=\"full\" style={{margin: \"0 auto\", width: \"50%\", display: \"inline-block\", verticalAlign: \"top\"}}>\n            <CandidateList \n              fullMovies={this.state.fullMovies} \n              candidateMovies={this.state.candidates}\n              selectedMovies={this.state.selected}\n              onEvent={this.onCandidateClick}\n              height={600}></CandidateList>\n          </Container>\n  \n          {/* Context table */}\n          <Container id=\"selected\" style={{margin: \"0 auto\", width: \"50%\", display: \"inline-block\", verticalAlign: \"top\"}}>\n            {/* <MovieList movies={this.state.candidates} Height={600}/> */}\n            <ContextList \n              fullMovies={this.state.fullMovies} \n              contextMovies={this.state.selected}\n              onEvent={this.onSelectedClick}\n              height={600}></ContextList>\n          </Container>\n  \n        </Container>\n        {/* BUTTON: generate recommendation */}\n        <div style={{textAlign: \"center\"}}>\n          <Button icon labelPosition='left' onClick={this.onRecommendClick}><Icon circular name='fire' color='red' />RECOMMEND!</Button>\n        </div>\n        \n  \n        {/* Recommendation table */}\n        <div style={{textAlign: \"center\"}}>\n          <Container id=\"recommendation\" style={{margin: \"0 auto\", paddingTop: 50, width: \"40%\", display: \"inline-block\", verticalAlign: \"top\"}}>\n            {/* <MovieList movies={this.state.recommended} Height={500}/> */}\n            <RecommendList \n              fullMovies={this.state.fullMovies} \n              recommendMovies={this.state.recommended}\n              // onEvent={this.onSelectedClick}\n              height={500}></RecommendList>\n          </Container>\n        </div>\n        <footer class=\"ui grid\" style={{paddingTop: 50, margin: \"0 auto\", width: \"80%\", display: \"inline-block\", verticalAlign: \"top\"}}>\n          <div style={{fontSize: \"4rem\", float: \"left\", width: \"100%\"}}>   </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/reportWebVitals.js",[],"/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/components/backup/MovieListForm.js",[],"/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/components/CandidateList.js",[],["38","39"],"/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/components/ContextList.js",[],"/Users/yk/Documents/Githubs/fullstack_recsys/react-front/src/components/RecommendList.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":3,"column":8,"nodeType":"46","messageId":"47","endLine":3,"endColumn":12},{"ruleId":"48","severity":1,"message":"49","line":107,"column":13,"nodeType":"50","endLine":107,"endColumn":39},{"ruleId":"51","severity":1,"message":"52","line":107,"column":39,"nodeType":"50","endLine":107,"endColumn":80},{"ruleId":"40","replacedBy":"53"},{"ruleId":"42","replacedBy":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["55"],["56"],"no-global-assign","no-unsafe-negation"]